"use strict";(self.webpackChunkcocossim_docs=self.webpackChunkcocossim_docs||[]).push([[896],{3421:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>x,frontMatter:()=>t,metadata:()=>i,toc:()=>o});const i=JSON.parse('{"id":"examples/basic","title":"Basic Examples","description":"This section provides practical examples to help you get started with COCOSSim.","source":"@site/docs/examples/basic.md","sourceDirName":"examples","slug":"/examples/basic","permalink":"/cocossim/docs/examples/basic","draft":false,"unlisted":false,"editUrl":"https://github.com/mc186/cocossim/tree/main/docs/examples/basic.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Basic Usage Guide","permalink":"/cocossim/docs/guides/basic-usage"},"next":{"title":"Architecture Overview","permalink":"/cocossim/docs/guides/architecture"}}');var l=s(4848),r=s(8453);const t={},a="Basic Examples",c={},o=[{value:"Example 1: Simple Matrix Multiplication",id:"example-1-simple-matrix-multiplication",level:2},{value:"Layer Configuration",id:"layer-configuration",level:3},{value:"Expected Results",id:"expected-results",level:3},{value:"Analysis",id:"analysis",level:3},{value:"Example 2: Batch Processing",id:"example-2-batch-processing",level:2},{value:"Layer Configuration",id:"layer-configuration-1",level:3},{value:"Comparison: Single vs Batch",id:"comparison-single-vs-batch",level:3},{value:"Example 3: Convolutional Layer",id:"example-3-convolutional-layer",level:2},{value:"Layer Configuration",id:"layer-configuration-2",level:3},{value:"Understanding Conv Parameters",id:"understanding-conv-parameters",level:3},{value:"Expected Results",id:"expected-results-1",level:3},{value:"Analysis",id:"analysis-1",level:3},{value:"Example 4: Multi-Core Performance",id:"example-4-multi-core-performance",level:2},{value:"Layer Configuration",id:"layer-configuration-3",level:3},{value:"Multi-Core Comparison Script",id:"multi-core-comparison-script",level:3},{value:"Analysis",id:"analysis-2",level:3},{value:"Example 5: CNN Feature Extraction",id:"example-5-cnn-feature-extraction",level:2},{value:"Layer Configuration",id:"layer-configuration-4",level:3},{value:"Layer-by-Layer Analysis",id:"layer-by-layer-analysis",level:3},{value:"Example 6: Memory vs Compute Bound",id:"example-6-memory-vs-compute-bound",level:2},{value:"Compute-Bound Workload",id:"compute-bound-workload",level:3},{value:"Memory-Bound Workload",id:"memory-bound-workload",level:3},{value:"Comparison Analysis",id:"comparison-analysis",level:3},{value:"Example 7: Activation Functions Comparison",id:"example-7-activation-functions-comparison",level:2},{value:"Layer Configuration",id:"layer-configuration-5",level:3},{value:"Comparison with Fused Operations",id:"comparison-with-fused-operations",level:3},{value:"Performance Comparison",id:"performance-comparison",level:3},{value:"Example 8: Transformer Attention Layer",id:"example-8-transformer-attention-layer",level:2},{value:"Layer Configuration",id:"layer-configuration-6",level:3},{value:"Understanding Attention Computation",id:"understanding-attention-computation",level:3},{value:"Performance Analysis",id:"performance-analysis",level:3},{value:"Running All Examples",id:"running-all-examples",level:2},{value:"Automated Test Script",id:"automated-test-script",level:3},{value:"Example Results Summary",id:"example-results-summary",level:3},{value:"Next Steps",id:"next-steps",level:2},{value:"Creating Custom Examples",id:"creating-custom-examples",level:2},{value:"Template for New Examples",id:"template-for-new-examples",level:3},{value:"Best Practices",id:"best-practices",level:3}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.header,{children:(0,l.jsx)(n.h1,{id:"basic-examples",children:"Basic Examples"})}),"\n",(0,l.jsx)(n.p,{children:"This section provides practical examples to help you get started with COCOSSim."}),"\n",(0,l.jsx)(n.h2,{id:"example-1-simple-matrix-multiplication",children:"Example 1: Simple Matrix Multiplication"}),"\n",(0,l.jsx)(n.h3,{id:"layer-configuration",children:"Layer Configuration"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:(0,l.jsx)(n.code,{children:"examples/simple_matmul.txt"})}),":"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{children:"Matmul 256 512 1024\n"})}),"\n",(0,l.jsx)(n.h3,{id:"expected-results",children:"Expected Results"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"./cocossim examples/simple_matmul.txt\n"})}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Output"}),":"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{children:"processing Matmul 256 512 1024\nPHASE: 0, Cycles: 3847, Jobs finished: 1/1, DRAM CMDs: 168\nCycles 3847\nSYSTOLIC_ARRAY 89.234567\nVECTOR_UNIT 0.000000\n"})}),"\n",(0,l.jsx)(n.h3,{id:"analysis",children:"Analysis"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Large Matrix"}),": 256\xd7512 \xd7 512\xd71024 requires significant compute"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"High SA Utilization"}),": ~89% indicates good resource usage"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Memory Efficient"}),": 168 DRAM commands for large computation shows good locality"]}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"example-2-batch-processing",children:"Example 2: Batch Processing"}),"\n",(0,l.jsx)(n.h3,{id:"layer-configuration-1",children:"Layer Configuration"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:(0,l.jsx)(n.code,{children:"examples/batch_matmul.txt"})}),":"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{children:"Matmul 8 128 256 512\n"})}),"\n",(0,l.jsx)(n.h3,{id:"comparison-single-vs-batch",children:"Comparison: Single vs Batch"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:'# Single matrix\necho "Matmul 128 256 512" > single.txt\n./cocossim single.txt > single_result.txt\n\n# Batched matrices (8x the work)\necho "Matmul 8 128 256 512" > batch.txt  \n./cocossim batch.txt > batch_result.txt\n\n# Compare efficiency\necho "Single matrix cycles:" $(grep "Cycles" single_result.txt | awk \'{print $2}\')\necho "Batch cycles:" $(grep "Cycles" batch_result.txt | awk \'{print $2}\')\necho "Batch efficiency:" $(echo "scale=2; $(grep "Cycles" single_result.txt | awk \'{print $2}\') * 8 / $(grep "Cycles" batch_result.txt | awk \'{print $2}\')" | bc)\n'})}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Expected"}),": Batch processing should show >90% efficiency due to better resource utilization."]}),"\n",(0,l.jsx)(n.h2,{id:"example-3-convolutional-layer",children:"Example 3: Convolutional Layer"}),"\n",(0,l.jsx)(n.h3,{id:"layer-configuration-2",children:"Layer Configuration"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:(0,l.jsx)(n.code,{children:"examples/conv_layer.txt"})}),":"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{children:"Conv 1 3 224 224 64 7 2 3\n"})}),"\n",(0,l.jsx)(n.h3,{id:"understanding-conv-parameters",children:"Understanding Conv Parameters"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Batch"}),": 1 (single image)"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Input Channels"}),": 3 (RGB)"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Input Size"}),": 224\xd7224 (ImageNet standard)"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Output Channels"}),": 64 (feature maps)"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Kernel Size"}),": 7\xd77"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Stride"}),": 2 (downsampling)"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Padding"}),": 3"]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"expected-results-1",children:"Expected Results"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"./cocossim examples/conv_layer.txt\n"})}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Output"}),":"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{children:"processing Conv 1 3 224 224 64 7 2 3\nConv2GEMM: batch=1, in_ch=3, in_h=224, in_w=224\n           out_ch=64, kernel=7, stride=2, padding=3  \n           out_h=112, out_w=112\n           GEMM dimensions: M=12544, K=147, N=64\nPHASE: 0, Cycles: 2156, Jobs finished: 1/1, DRAM CMDs: 89\nCycles 2156\nSYSTOLIC_ARRAY 78.945623\nVECTOR_UNIT 0.000000\n"})}),"\n",(0,l.jsx)(n.h3,{id:"analysis-1",children:"Analysis"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"GEMM Conversion"}),": Conv transformed to 12544\xd7147 \xd7 147\xd764 matrix multiply"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Moderate Utilization"}),": ~79% SA utilization typical for conv layers"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Memory Pattern"}),": 89 DRAM commands shows conv2gemm memory overhead"]}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"example-4-multi-core-performance",children:"Example 4: Multi-Core Performance"}),"\n",(0,l.jsx)(n.h3,{id:"layer-configuration-3",children:"Layer Configuration"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:(0,l.jsx)(n.code,{children:"examples/large_workload.txt"})}),":"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{children:"Matmul 1024 2048 4096\n"})}),"\n",(0,l.jsx)(n.h3,{id:"multi-core-comparison-script",children:"Multi-Core Comparison Script"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:'#!/bin/bash\n# multi_core_test.sh\n\nworkload="examples/large_workload.txt"\necho "=== Multi-Core Scaling Test ==="\n\nfor cores in 1 2 4 8; do\n    export N_CORES=$cores\n    result=$(./cocossim $workload 2>/dev/null | grep "Cycles" | awk \'{print $2}\')\n    sa_util=$(./cocossim $workload 2>/dev/null | grep "SYSTOLIC_ARRAY" | awk \'{print $2}\')\n    \n    speedup=$(echo "scale=2; $baseline / $result" | bc 2>/dev/null || echo "1.00")\n    if [ $cores -eq 1 ]; then baseline=$result; speedup="1.00"; fi\n    \n    printf "Cores: %d, Cycles: %6d, Speedup: %5.2fx, SA Util: %6.2f%%\\n" \\\n           $cores $result $speedup $sa_util\ndone\n'})}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Expected Output"}),":"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{children:"=== Multi-Core Scaling Test ===\nCores: 1, Cycles:  15234, Speedup:  1.00x, SA Util:  91.23%\nCores: 2, Cycles:   8456, Speedup:  1.80x, SA Util:  87.45%  \nCores: 4, Cycles:   4789, Speedup:  3.18x, SA Util:  79.67%\nCores: 8, Cycles:   3234, Speedup:  4.71x, SA Util:  65.89%\n"})}),"\n",(0,l.jsx)(n.h3,{id:"analysis-2",children:"Analysis"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Good Scaling"}),": Up to 4 cores shows near-linear speedup"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Diminishing Returns"}),": 8 cores limited by workload parallelism"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Utilization Trade-off"}),": More cores = lower per-core utilization"]}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"example-5-cnn-feature-extraction",children:"Example 5: CNN Feature Extraction"}),"\n",(0,l.jsx)(n.h3,{id:"layer-configuration-4",children:"Layer Configuration"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:(0,l.jsx)(n.code,{children:"examples/cnn_layers.txt"})}),":"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{children:"Conv 1 3 224 224 64 7 2 3\nActivation 1 64 112 112\nConv 1 64 112 112 128 3 1 1  \nActivation 1 128 112 112\nConv 1 128 112 112 256 3 2 1\nActivation 1 256 56 56\n"})}),"\n",(0,l.jsx)(n.h3,{id:"layer-by-layer-analysis",children:"Layer-by-Layer Analysis"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:'# Create individual layer files for comparison\necho "Conv 1 3 224 224 64 7 2 3" > layer1.txt\necho "Activation 1 64 112 112" > layer2.txt  \necho "Conv 1 128 112 112 256 3 2 1" > layer3.txt\n\n# Test each layer\nfor i in 1 2 3; do\n    echo "=== Layer $i ==="\n    ./cocossim layer$i.txt | grep -E "Cycles|SYSTOLIC|VECTOR"\ndone\n\n# Test full sequence\necho "=== Full CNN ==="  \n./cocossim examples/cnn_layers.txt | grep -E "Cycles|SYSTOLIC|VECTOR"\n'})}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Analysis Points"}),":"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Layer 1"}),": Large spatial dimensions, low channel count"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Layer 2"}),": Pure activation, should use vector units"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Layer 3"}),": Smaller spatial, higher channel count"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Pipeline Effects"}),": Full sequence shows inter-layer dependencies"]}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"example-6-memory-vs-compute-bound",children:"Example 6: Memory vs Compute Bound"}),"\n",(0,l.jsx)(n.h3,{id:"compute-bound-workload",children:"Compute-Bound Workload"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:(0,l.jsx)(n.code,{children:"examples/compute_bound.txt"})}),":"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{children:"Matmul 2048 2048 2048\n"})}),"\n",(0,l.jsx)(n.h3,{id:"memory-bound-workload",children:"Memory-Bound Workload"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:(0,l.jsx)(n.code,{children:"examples/memory_bound.txt"})}),":"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{children:"Matmul 32 8192 32\n"})}),"\n",(0,l.jsx)(n.h3,{id:"comparison-analysis",children:"Comparison Analysis"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:'# Test both workloads\necho "=== Compute Bound (2048x2048x2048) ==="\n./cocossim examples/compute_bound.txt | awk \'\n/Cycles/ { cycles = $2 }\n/DRAM CMDs/ { dram = $5 }\n/SYSTOLIC_ARRAY/ { sa_util = $2 }\nEND { printf "Cycles: %d, DRAM: %d, Ratio: %.2f, SA Util: %.2f%%\\n", cycles, dram, dram/cycles, sa_util }\'\n\necho "=== Memory Bound (32x8192x32) ==="  \n./cocossim examples/memory_bound.txt | awk \'\n/Cycles/ { cycles = $2 }\n/DRAM CMDs/ { dram = $5 }\n/SYSTOLIC_ARRAY/ { sa_util = $2 }\nEND { printf "Cycles: %d, DRAM: %d, Ratio: %.2f, SA Util: %.2f%%\\n", cycles, dram, dram/cycles, sa_util }\'\n'})}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Expected Analysis"}),":"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Compute-Bound"}),": Low DRAM/cycle ratio, high SA utilization"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Memory-Bound"}),": High DRAM/cycle ratio, lower SA utilization"]}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"example-7-activation-functions-comparison",children:"Example 7: Activation Functions Comparison"}),"\n",(0,l.jsx)(n.h3,{id:"layer-configuration-5",children:"Layer Configuration"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:(0,l.jsx)(n.code,{children:"examples/activations.txt"})}),":"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{children:"Matmul 512 1024 2048\nActivation 512 2048\n"})}),"\n",(0,l.jsx)(n.h3,{id:"comparison-with-fused-operations",children:"Comparison with Fused Operations"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:(0,l.jsx)(n.code,{children:"examples/fused_matmul.txt"})}),":"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{children:"MatmulAct 512 1024 2048\n"})}),"\n",(0,l.jsx)(n.h3,{id:"performance-comparison",children:"Performance Comparison"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:'echo "=== Separate Matmul + Activation ==="\n./cocossim examples/activations.txt | grep -E "Cycles|VECTOR"\n\necho "=== Fused MatmulAct ==="\n./cocossim examples/fused_matmul.txt | grep -E "Cycles|VECTOR"\n'})}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Analysis"}),": Fused operations should show:"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Fewer total cycles (reduced memory traffic)"}),"\n",(0,l.jsx)(n.li,{children:"Better vector unit utilization"}),"\n",(0,l.jsx)(n.li,{children:"More efficient memory access patterns"}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"example-8-transformer-attention-layer",children:"Example 8: Transformer Attention Layer"}),"\n",(0,l.jsx)(n.h3,{id:"layer-configuration-6",children:"Layer Configuration"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:(0,l.jsx)(n.code,{children:"examples/attention.txt"})}),":"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{children:"SelfAttention 8 512 768 768\nLayerNorm 8 512 768\n"})}),"\n",(0,l.jsx)(n.h3,{id:"understanding-attention-computation",children:"Understanding Attention Computation"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"8 heads"}),": Multi-head attention"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"512 sequence length"}),": Typical for many transformer models"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"768 hidden dimension"}),": BERT-base size"]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"performance-analysis",children:"Performance Analysis"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"./cocossim examples/attention.txt\n"})}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Expected Patterns"}),":"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Multiple internal matmul operations (Q, K, V projections)"}),"\n",(0,l.jsx)(n.li,{children:"Attention computation (Q\xd7K^T, softmax, \xd7V)"}),"\n",(0,l.jsx)(n.li,{children:"High memory traffic due to sequence length squared complexity"}),"\n",(0,l.jsx)(n.li,{children:"Mixed SA and vector unit utilization"}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"running-all-examples",children:"Running All Examples"}),"\n",(0,l.jsx)(n.h3,{id:"automated-test-script",children:"Automated Test Script"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:'#!/bin/bash\n# run_all_examples.sh\n\nexamples=(\n    "simple_matmul.txt"\n    "batch_matmul.txt" \n    "conv_layer.txt"\n    "large_workload.txt"\n    "cnn_layers.txt"\n    "compute_bound.txt"\n    "memory_bound.txt"\n    "activations.txt"\n    "attention.txt"\n)\n\necho "=== COCOSSim Examples Test Suite ==="\nfor example in "${examples[@]}"; do\n    if [ -f "examples/$example" ]; then\n        echo "Running $example..."\n        ./cocossim "examples/$example" > "results/${example%.txt}_results.txt"\n        cycles=$(grep "Cycles" "results/${example%.txt}_results.txt" | awk \'{print $2}\')\n        sa_util=$(grep "SYSTOLIC_ARRAY" "results/${example%.txt}_results.txt" | awk \'{print $2}\')\n        printf "%-20s Cycles: %8d, SA Util: %6.2f%%\\n" "$example" "$cycles" "$sa_util"\n    else\n        echo "Warning: $example not found"\n    fi\ndone\n'})}),"\n",(0,l.jsx)(n.h3,{id:"example-results-summary",children:"Example Results Summary"}),"\n",(0,l.jsxs)(n.table,{children:[(0,l.jsx)(n.thead,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.th,{children:"Example"}),(0,l.jsx)(n.th,{children:"Cycles"}),(0,l.jsx)(n.th,{children:"SA Util"}),(0,l.jsx)(n.th,{children:"VU Util"}),(0,l.jsx)(n.th,{children:"Memory Intensity"})]})}),(0,l.jsxs)(n.tbody,{children:[(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:"Simple MatMul"}),(0,l.jsx)(n.td,{children:"3,847"}),(0,l.jsx)(n.td,{children:"89.23%"}),(0,l.jsx)(n.td,{children:"0%"}),(0,l.jsx)(n.td,{children:"Low"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:"Batch MatMul"}),(0,l.jsx)(n.td,{children:"28,456"}),(0,l.jsx)(n.td,{children:"94.56%"}),(0,l.jsx)(n.td,{children:"0%"}),(0,l.jsx)(n.td,{children:"Low"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:"Conv Layer"}),(0,l.jsx)(n.td,{children:"2,156"}),(0,l.jsx)(n.td,{children:"78.95%"}),(0,l.jsx)(n.td,{children:"0%"}),(0,l.jsx)(n.td,{children:"Medium"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:"Large Workload"}),(0,l.jsx)(n.td,{children:"15,234"}),(0,l.jsx)(n.td,{children:"91.23%"}),(0,l.jsx)(n.td,{children:"0%"}),(0,l.jsx)(n.td,{children:"Low"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:"CNN Layers"}),(0,l.jsx)(n.td,{children:"12,789"}),(0,l.jsx)(n.td,{children:"82.34%"}),(0,l.jsx)(n.td,{children:"15.67%"}),(0,l.jsx)(n.td,{children:"Medium"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:"Attention"}),(0,l.jsx)(n.td,{children:"8,945"}),(0,l.jsx)(n.td,{children:"76.45%"}),(0,l.jsx)(n.td,{children:"23.12%"}),(0,l.jsx)(n.td,{children:"High"})]})]})]}),"\n",(0,l.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,l.jsx)(n.p,{children:"After running these basic examples:"}),"\n",(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:(0,l.jsx)(n.a,{href:"/cocossim/docs/guides/architecture",children:"Architecture Guide"})})," - Understand system design"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:(0,l.jsx)(n.a,{href:"/cocossim/docs/guides/basic-usage",children:"Basic Usage Guide"})})," - Learn more simulation options"]}),"\n",(0,l.jsx)(n.li,{children:"Create your own workloads based on real neural network models"}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"creating-custom-examples",children:"Creating Custom Examples"}),"\n",(0,l.jsx)(n.h3,{id:"template-for-new-examples",children:"Template for New Examples"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:'# 1. Create layer configuration file\necho "YourLayer param1 param2 param3" > my_example.txt\n\n# 2. Test and validate\n./cocossim my_example.txt\n\n# 3. Document expected behavior\necho "Expected: [describe expected performance characteristics]"\n\n# 4. Add to test suite\necho "my_example.txt" >> examples/test_list.txt\n'})}),"\n",(0,l.jsx)(n.h3,{id:"best-practices",children:"Best Practices"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Start Small"}),": Test simple cases before complex workloads"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Document Expectations"}),": Note what performance characteristics to expect"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Compare Variations"}),": Test different parameters to understand behavior"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Validate Results"}),": Check that outputs make intuitive sense"]}),"\n"]})]})}function x(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>a});var i=s(6540);const l={},r=i.createContext(l);function t(e){const n=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:t(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);