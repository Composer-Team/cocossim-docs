"use strict";(self.webpackChunkcocossim_docs=self.webpackChunkcocossim_docs||[]).push([[361],{2939:(e,s,i)=>{i.r(s),i.d(s,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>c,metadata:()=>n,toc:()=>a});const n=JSON.parse('{"id":"index","title":"COCOSSim: Cycle-Accurate Neural Network Accelerator Simulator","description":"COCOSSim is a high-performance, cycle-accurate simulator for neural network accelerators featuring systolic array architectures. Designed for researchers and engineers working on AI accelerator design and optimization.","source":"@site/docs/index.md","sourceDirName":".","slug":"/","permalink":"/cocossim/docs/","draft":false,"unlisted":false,"editUrl":"https://github.com/mc186/cocossim/tree/main/docs/index.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","next":{"title":"Installation Guide","permalink":"/cocossim/docs/guides/installation"}}');var r=i(4848),t=i(8453);const c={},l="COCOSSim: Cycle-Accurate Neural Network Accelerator Simulator",o={},a=[{value:"\ud83d\ude80 Quick Start",id:"-quick-start",level:2},{value:"Key Features",id:"key-features",level:2},{value:"Heterogeneous Compute Units Support",id:"heterogeneous-compute-units-support",level:3},{value:"Comprehensive Layer Support",id:"comprehensive-layer-support",level:3},{value:"Realistic Memory Modeling",id:"realistic-memory-modeling",level:3},{value:"Detailed Performance Analysis",id:"detailed-performance-analysis",level:3},{value:"Example Results",id:"example-results",level:2},{value:"Architecture Overview",id:"architecture-overview",level:2},{value:"\ud83d\udcda Documentation",id:"-documentation",level:2},{value:"Getting Started",id:"getting-started",level:3},{value:"Architecture &amp; Design",id:"architecture--design",level:3},{value:"API Reference",id:"api-reference",level:3},{value:"Use Cases",id:"use-cases",level:2},{value:"Research Applications",id:"research-applications",level:3},{value:"Why COCOSSim?",id:"why-cocossim",level:2},{value:"Getting Involved",id:"getting-involved",level:2},{value:"\ud83d\udcd6 Learn More",id:"-learn-more",level:3},{value:"\ud83d\udd17 Connect",id:"-connect",level:3}];function d(e){const s={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.header,{children:(0,r.jsx)(s.h1,{id:"cocossim-cycle-accurate-neural-network-accelerator-simulator",children:"COCOSSim: Cycle-Accurate Neural Network Accelerator Simulator"})}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"COCOSSim"})," is a high-performance, cycle-accurate simulator for neural network accelerators featuring systolic array architectures. Designed for researchers and engineers working on AI accelerator design and optimization."]}),"\n",(0,r.jsx)(s.h2,{id:"-quick-start",children:"\ud83d\ude80 Quick Start"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-bash",children:'# Clone and build\ngit clone https://github.com/mc186/cocossim.git\ncd cocossim && git submodule update --init --recursive\nmkdir build && cd build && cmake .. && make -j$(nproc)\n\n# Run your first simulation\necho "Matmul 128 256 512" > test.txt\n./cocossim test.txt\n'})}),"\n",(0,r.jsx)(s.h2,{id:"key-features",children:"Key Features"}),"\n",(0,r.jsx)(s.h3,{id:"heterogeneous-compute-units-support",children:"Heterogeneous Compute Units Support"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"Support for heterogeneous systolic arrays including Weight Stationary (WS) and Output Stationary (OS)."}),"\n",(0,r.jsx)(s.li,{children:"Vector unit modeling for activation layers."}),"\n",(0,r.jsx)(s.li,{children:"Independent, parallel scheduling across processing units"}),"\n",(0,r.jsx)(s.li,{children:"Realistic resource contention modeling"}),"\n"]}),"\n",(0,r.jsx)(s.h3,{id:"comprehensive-layer-support",children:"Comprehensive Layer Support"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Matrix Operations"}),": GEMMs, Convolutions"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Attention"}),": Multi-head self-attention mechanisms"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Activations"}),": Element-wise operations and normalization"]}),"\n"]}),"\n",(0,r.jsx)(s.h3,{id:"realistic-memory-modeling",children:"Realistic Memory Modeling"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"DRAMSim3 Integration"}),": Cycle-accurate memory simulation using DRAMSim3 with multiple memory types including HBM, DDR4, DDR5."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Buffer Modelling"}),": Compute units modeled to interact with activation and weight buffers."]}),"\n"]}),"\n",(0,r.jsx)(s.h3,{id:"detailed-performance-analysis",children:"Detailed Performance Analysis"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"Cycle-accurate timing"}),"\n",(0,r.jsx)(s.li,{children:"Per-unit utilization metrics"}),"\n",(0,r.jsx)(s.li,{children:"Memory bandwidth analysis"}),"\n",(0,r.jsx)(s.li,{children:"VCD waveform generation for debugging"}),"\n"]}),"\n",(0,r.jsx)(s.h2,{id:"example-results",children:"Example Results"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-bash",children:"./cocossim transformer_layer.txt\n"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{children:"PHASE: 0, Cycles: 15,234, Jobs finished: 12/12, DRAM CMDs: 1,456\nCycles 15234\nSYSTOLIC_ARRAY 87.45% \nVECTOR_UNIT 23.67%\n"})}),"\n",(0,r.jsx)(s.h2,{id:"architecture-overview",children:"Architecture Overview"}),"\n",(0,r.jsxs)(s.p,{children:["COCOSSim uses ",(0,r.jsx)(s.strong,{children:"state machine models"})," at its core to simulate compute units with cycle-accurate precision. Each processing unit (systolic arrays and vector units) is implemented as a finite state machine that interacts with the job scheduler and memory system through well-defined interfaces."]}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.img,{alt:"COCOSSim Architecture",src:i(3213).A+"",width:"1284",height:"506"})}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Core Design Principles:"})}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"State Machine Processing Units"}),": Each compute unit operates as a cycle-accurate state machine"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Job Scheduler Integration"}),": State machines receive jobs and report completion status"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Memory System Interaction"}),": State transitions trigger memory requests and handle responses"]}),"\n"]}),"\n",(0,r.jsx)(s.h2,{id:"-documentation",children:"\ud83d\udcda Documentation"}),"\n",(0,r.jsx)(s.h3,{id:"getting-started",children:"Getting Started"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:(0,r.jsx)(s.a,{href:"/cocossim/docs/guides/installation",children:"Installation"})})," - Setup and build instructions"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:(0,r.jsx)(s.a,{href:"/cocossim/docs/guides/basic-usage",children:"Basic Usage"})})," - Your first simulations"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:(0,r.jsx)(s.a,{href:"/cocossim/docs/examples/basic",children:"Examples"})})," - Practical examples and tutorials"]}),"\n"]}),"\n",(0,r.jsx)(s.h3,{id:"architecture--design",children:"Architecture & Design"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:(0,r.jsx)(s.a,{href:"/cocossim/docs/guides/architecture",children:"System Architecture"})})," - High-level design overview"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:(0,r.jsx)(s.a,{href:"/cocossim/docs/guides/systolic-arrays",children:"Systolic Arrays"})})," - WS vs OS execution modes"]}),"\n"]}),"\n",(0,r.jsx)(s.h3,{id:"api-reference",children:"API Reference"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:(0,r.jsx)(s.a,{href:"/cocossim/docs/api/core-classes",children:"Core Classes"})})," - Job, State, Arch APIs"]}),"\n"]}),"\n",(0,r.jsx)(s.h2,{id:"use-cases",children:"Use Cases"}),"\n",(0,r.jsx)(s.h3,{id:"research-applications",children:"Research Applications"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Architecture Exploration"}),": Compare different heterogeneous compute unit configurations"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Memory System Analysis"}),": Study the impact of different memory hierarchies"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Parallelization Studies"}),": Analyze scaling behavior across core counts"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Workload Characterization"}),": Understand compute vs memory bottlenecks"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Performance Prediction"}),": Estimate performance for neural network models on your hardware"]}),"\n"]}),"\n",(0,r.jsx)(s.h2,{id:"why-cocossim",children:"Why COCOSSim?"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Extremely Fast Simulation"}),":\nState of the art speed for Neural Network Accelerator simulation."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Cycle-Accurate"}),": Precise timing models for realistic performance estimates"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Validated against real hardware"}),": Based on real accelerator architectures and behaviors. Validated on Google TPU."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Scalable"}),": Efficient simulation of large-scale multi-core systems"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Configurable"}),": Extensive parameters for architecture customization"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Modular Design"}),": Easy to add new processing units and layer types."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Open Source"}),": Full access to source code for research and development"]}),"\n"]}),"\n",(0,r.jsx)(s.h2,{id:"getting-involved",children:"Getting Involved"}),"\n",(0,r.jsx)(s.h3,{id:"-learn-more",children:"\ud83d\udcd6 Learn More"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.a,{href:"/cocossim/docs/guides/installation",children:"Installation Guide"})," - Get up and running in minutes"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.a,{href:"/cocossim/docs/guides/architecture",children:"Architecture Deep Dive"})," - Understand the system design"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.a,{href:"/cocossim/docs/api/core-classes",children:"API Documentation"})," - Integrate COCOSSim into your workflow"]}),"\n"]}),"\n",(0,r.jsx)(s.h3,{id:"-connect",children:"\ud83d\udd17 Connect"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"GitHub"}),": ",(0,r.jsx)(s.a,{href:"https://github.com/mc186/cocossim",children:"View source code and contribute"})]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Issues"}),": ",(0,r.jsx)(s.a,{href:"https://github.com/mc186/cocossim/issues",children:"Report bugs and request features"})]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Discussions"}),": ",(0,r.jsx)(s.a,{href:"https://github.com/mc186/cocossim/discussions",children:"Join the community"})]}),"\n"]}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Ready to get started?"})," \u2192 ",(0,r.jsx)(s.a,{href:"/cocossim/docs/guides/installation",children:"Install COCOSSim"})," and run your first simulation in under 5 minutes!"]}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.em,{children:"COCOSSim is developed by the APEX Lab at Duke University and is available under the Apache License 2.0."})})]})}function h(e={}){const{wrapper:s}={...(0,t.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},3213:(e,s,i)=>{i.d(s,{A:()=>n});const n=i.p+"assets/images/cocossimfig-21f064457ba1a1e686769bd261b51e8d.png"},8453:(e,s,i)=>{i.d(s,{R:()=>c,x:()=>l});var n=i(6540);const r={},t=n.createContext(r);function c(e){const s=n.useContext(t);return n.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function l(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),n.createElement(t.Provider,{value:s},e.children)}}}]);