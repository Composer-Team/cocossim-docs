"use strict";(self.webpackChunkcocossim_docs=self.webpackChunkcocossim_docs||[]).push([[726],{8073:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>u,frontMatter:()=>l,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"guides/basic-usage","title":"Basic Usage Guide","description":"This guide covers the fundamentals of using COCOSSim to simulate neural network accelerator performance.","source":"@site/docs/guides/basic-usage.md","sourceDirName":"guides","slug":"/guides/basic-usage","permalink":"/cocossim/docs/guides/basic-usage","draft":false,"unlisted":false,"editUrl":"https://github.com/mc186/cocossim/tree/main/docs/guides/basic-usage.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Installation Guide","permalink":"/cocossim/docs/guides/installation"},"next":{"title":"Basic Examples","permalink":"/cocossim/docs/examples/basic"}}');var t=i(4848),r=i(8453);const l={},a="Basic Usage Guide",o={},c=[{value:"Quick Start",id:"quick-start",level:2},{value:"1. Basic Simulation Command",id:"1-basic-simulation-command",level:3},{value:"Command Line Options",id:"command-line-options",level:3},{value:"Global Options",id:"global-options",level:4},{value:"Architecture-Specific Options",id:"architecture-specific-options",level:4},{value:"Layer Configuration Format",id:"layer-configuration-format",level:3},{value:"3. Run Your First Simulation",id:"3-run-your-first-simulation",level:3},{value:"Understanding the Output",id:"understanding-the-output",level:2},{value:"Performance Metrics",id:"performance-metrics",level:3},{value:"Layer Configuration Format",id:"layer-configuration-format-1",level:2},{value:"Basic Syntax",id:"basic-syntax",level:3},{value:"Supported Layer Types",id:"supported-layer-types",level:3},{value:"Matmul (Matrix Multiplication)",id:"matmul-matrix-multiplication",level:4},{value:"Conv (Convolution)",id:"conv-convolution",level:4},{value:"Activation Functions",id:"activation-functions",level:4},{value:"LayerNorm",id:"layernorm",level:4},{value:"Advanced Layer Types",id:"advanced-layer-types",level:3},{value:"SelfAttention",id:"selfattention",level:4},{value:"MatmulAct (Fused Matrix Multiplication + Activation)",id:"matmulact-fused-matrix-multiplication--activation",level:4},{value:"ActMatmul (Activation + Matrix Multiplication)",id:"actmatmul-activation--matrix-multiplication",level:4},{value:"Configuration Options",id:"configuration-options",level:2},{value:"Architecture Configuration",id:"architecture-configuration",level:3},{value:"Command-Line Parameters",id:"command-line-parameters",level:4},{value:"Basic Configuration Examples",id:"basic-configuration-examples",level:4},{value:"Memory Configuration",id:"memory-configuration",level:3},{value:"Multi-Layer Networks",id:"multi-layer-networks",level:2},{value:"Sequential Layers",id:"sequential-layers",level:3},{value:"Transformer Example",id:"transformer-example",level:3},{value:"Performance Analysis",id:"performance-analysis",level:2},{value:"Comparing Configurations",id:"comparing-configurations",level:3},{value:"Utilization Analysis",id:"utilization-analysis",level:3},{value:"Memory Analysis",id:"memory-analysis",level:3},{value:"Debugging and Visualization",id:"debugging-and-visualization",level:2},{value:"VCD Waveform Generation",id:"vcd-waveform-generation",level:3},{value:"Job Graph Visualization",id:"job-graph-visualization",level:3},{value:"Common Usage Patterns",id:"common-usage-patterns",level:2},{value:"Benchmarking Different Architectures",id:"benchmarking-different-architectures",level:3},{value:"Parameter Sweeping",id:"parameter-sweeping",level:3},{value:"Workload Characterization",id:"workload-characterization",level:3},{value:"Next Steps",id:"next-steps",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"basic-usage-guide",children:"Basic Usage Guide"})}),"\n",(0,t.jsx)(n.p,{children:"This guide covers the fundamentals of using COCOSSim to simulate neural network accelerator performance."}),"\n",(0,t.jsx)(n.h2,{id:"quick-start",children:"Quick Start"}),"\n",(0,t.jsx)(n.h3,{id:"1-basic-simulation-command",children:"1. Basic Simulation Command"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"./cocossim -c 1 -sa_sz 64 -sz_vu 64 -f 1 -i layers.txt -o results.txt\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The simulator reads a layer configuration file specified with ",(0,t.jsx)(n.code,{children:"-i"})," and outputs performance statistics to the file specified with ",(0,t.jsx)(n.code,{children:"-o"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"command-line-options",children:"Command Line Options"}),"\n",(0,t.jsx)(n.h4,{id:"global-options",children:"Global Options"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"-i <file>"}),": Input layer configuration file (required)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"-o <file>"}),": Output statistics file (required)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"-f <float>"}),": Operating frequency in GHz"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"-h"}),": Display help information"]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"architecture-specific-options",children:"Architecture-Specific Options"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"-c <int>"}),": Number of compute cores"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"-sa_sz <int>"}),": Systolic array size (e.g., 64 for 64\xd764 array)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"-sz_vu <int>"}),": Vector unit size"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"-ws <0|1>"}),": Dataflow mode (0=Output Stationary, 1=Weight Stationary)"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"layer-configuration-format",children:"Layer Configuration Format"}),"\n",(0,t.jsx)(n.p,{children:"Create a txt file with operation specifications.\nCreate a simple matrix multiplication test:"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"simple_matmul.txt"})}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"Matmul 128 256 512\n"})}),"\n",(0,t.jsx)(n.p,{children:"This defines a matrix multiplication with dimensions M=128, K=256, N=512."}),"\n",(0,t.jsx)(n.h3,{id:"3-run-your-first-simulation",children:"3. Run Your First Simulation"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"cd build\n./cocossim -i ../examples/simple_matmul.txt -o results.txt\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Expected Output"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"processing Matmul 128 256 512\nPHASE: 0, Cycles: 1523, Jobs finished: 1/1, DRAM CMDs: 42\nCycles 1523\nSYSTOLIC_ARRAY 85.234567\nVECTOR_UNIT 0.000000\n"})}),"\n",(0,t.jsx)(n.h2,{id:"understanding-the-output",children:"Understanding the Output"}),"\n",(0,t.jsx)(n.h3,{id:"performance-metrics",children:"Performance Metrics"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Cycles"}),": Total simulation cycles to complete all jobs"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Jobs finished"}),": Number of completed jobs out of total jobs"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"DRAM CMDs"}),": Total memory commands issued to DRAM"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"SYSTOLIC_ARRAY"}),": Utilization percentage of systolic arrays"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"VECTOR_UNIT"}),": Utilization percentage of vector units"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"layer-configuration-format-1",children:"Layer Configuration Format"}),"\n",(0,t.jsx)(n.h3,{id:"basic-syntax",children:"Basic Syntax"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"LayerType dimension1 dimension2 ... dimensionN\n"})}),"\n",(0,t.jsx)(n.h3,{id:"supported-layer-types",children:"Supported Layer Types"}),"\n",(0,t.jsx)(n.h4,{id:"matmul-matrix-multiplication",children:"Matmul (Matrix Multiplication)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"# 2D Matrix: M x K \xd7 K x N = M x N\nMatmul M K N\n\n# 3D Batched: Batch x M x K \xd7 K x N = Batch x M x N  \nMatmul Batch M K N\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Examples"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"Matmul 128 256 512          # 128\xd7256 \xd7 256\xd7512 = 128\xd7512\nMatmul 8 128 256 512        # Batch=8, 128\xd7256 \xd7 256\xd7512 per batch\n"})}),"\n",(0,t.jsx)(n.h4,{id:"conv-convolution",children:"Conv (Convolution)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"# Basic Conv: batch, input_channels, input_height, input_width, output_channels\nConv batch in_ch in_h in_w out_ch\n\n# Full Conv: includes kernel_size, stride, padding\nConv batch in_ch in_h in_w out_ch kernel_size stride padding\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Examples"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"Conv 1 3 224 224 64                    # Input: 1\xd73\xd7224\xd7224, Output: 1\xd764\xd7222\xd7222 (kernel=3, stride=1, pad=1 default)\nConv 1 3 224 224 64 3 1 1             # Explicit: kernel=3, stride=1, padding=1\nConv 1 64 112 112 128 3 2 1           # Stride=2 for downsampling\n"})}),"\n",(0,t.jsx)(n.h4,{id:"activation-functions",children:"Activation Functions"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"# Element-wise activation on tensor\nActivation total_elements\n\n# Multi-dimensional activation  \nActivation dim1 dim2 dim3 ...\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Examples"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"Activation 65536           # ReLU on 65536 elements\nActivation 8 128 512       # Activation on 8\xd7128\xd7512 tensor\n"})}),"\n",(0,t.jsx)(n.h4,{id:"layernorm",children:"LayerNorm"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"# 1D LayerNorm\nLayerNorm normalized_dim\n\n# 2D LayerNorm  \nLayerNorm batch_size normalized_dim\n\n# Grouped LayerNorm\nLayerNorm batch_size seq_len hidden_dim\n"})}),"\n",(0,t.jsx)(n.h3,{id:"advanced-layer-types",children:"Advanced Layer Types"}),"\n",(0,t.jsx)(n.h4,{id:"selfattention",children:"SelfAttention"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"# Basic Attention: seq_len, hidden_dim, hidden_dim\nSelfAttention M K N\n\n# Multi-Head Attention: num_heads, seq_len, hidden_dim, hidden_dim  \nSelfAttention num_heads M K N\n"})}),"\n",(0,t.jsx)(n.h4,{id:"matmulact-fused-matrix-multiplication--activation",children:"MatmulAct (Fused Matrix Multiplication + Activation)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"MatmulAct M K N             # Matmul followed by activation\n"})}),"\n",(0,t.jsx)(n.h4,{id:"actmatmul-activation--matrix-multiplication",children:"ActMatmul (Activation + Matrix Multiplication)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"ActMatmul M K N             # Activation followed by matmul\n"})}),"\n",(0,t.jsx)(n.h2,{id:"configuration-options",children:"Configuration Options"}),"\n",(0,t.jsx)(n.h3,{id:"architecture-configuration",children:"Architecture Configuration"}),"\n",(0,t.jsx)(n.p,{children:"COCOSSim uses command-line arguments for configuration:"}),"\n",(0,t.jsx)(n.h4,{id:"command-line-parameters",children:"Command-Line Parameters"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"-c <cores>"}),": Number of cores (default: 1)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"-sa_sz <size>"}),": Systolic array size (default: 64)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"-sz_vu <size>"}),": Vector unit size (default: 64)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"-ws <mode>"}),": Weight stationary mode (1=WS, 0=OS, default: 1)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"-f <flag>"}),": Additional flags (1=verbose, default: 0)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"-i <file>"}),": Input layer configuration file"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"-o <file>"}),": Output results file"]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"basic-configuration-examples",children:"Basic Configuration Examples"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Single core, 64x64 systolic array, WS mode\n./cocossim -c 1 -sa_sz 64 -sz_vu 64 -ws 1 -i layers.txt -o results.txt\n\n# Multi-core with larger systolic arrays\n./cocossim -c 4 -sa_sz 128 -sz_vu 128 -ws 1 -i layers.txt -o results.txt\n\n# Output stationary mode \n./cocossim -c 1 -sa_sz 64 -sz_vu 64 -ws 0 -f 1 -i layers.txt -o results.txt\n"})}),"\n",(0,t.jsx)(n.h3,{id:"memory-configuration",children:"Memory Configuration"}),"\n",(0,t.jsxs)(n.p,{children:["Memory type is configured in the ",(0,t.jsx)(n.code,{children:"src/memory.cc"})," file:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Default config: dramsim3/configs/HBM2_8Gb_x128.ini\n# Choose a different memory config or change parameters in this config.\n"})}),"\n",(0,t.jsx)(n.h2,{id:"multi-layer-networks",children:"Multi-Layer Networks"}),"\n",(0,t.jsx)(n.h3,{id:"sequential-layers",children:"Sequential Layers"}),"\n",(0,t.jsx)(n.p,{children:"Define multiple layers in sequence:"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"cnn_example.txt"})}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"Conv 1 3 224 224 64 7 2 3\nActivation 1 64 112 112  \nConv 1 64 112 112 128 3 1 1\nActivation 1 128 112 112\nConv 1 128 112 112 256 3 2 1\nActivation 1 256 56 56\n"})}),"\n",(0,t.jsx)(n.h3,{id:"transformer-example",children:"Transformer Example"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"transformer_layer.txt"})}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"SelfAttention 8 512 768 768\nLayerNorm 8 512 768\nMatmul 8 512 768 3072\nActivation 8 512 3072  \nMatmul 8 512 3072 768\nLayerNorm 8 512 768\n"})}),"\n",(0,t.jsx)(n.h2,{id:"performance-analysis",children:"Performance Analysis"}),"\n",(0,t.jsx)(n.h3,{id:"comparing-configurations",children:"Comparing Configurations"}),"\n",(0,t.jsx)(n.p,{children:"Run the same workload with different settings:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# Single core baseline\n./cocossim -c 1 -sa_sz 64 -ws 1 -i workload.txt -o single_core.log\n\n# Multi-core comparison\n./cocossim -c 4 -sa_sz 64 -ws 1 -i workload.txt -o multi_core.log\n\n# Compare results\necho "Single Core:" && grep "Cycles" single_core.log\necho "Multi Core:" && grep "Cycles" multi_core.log\n'})}),"\n",(0,t.jsx)(n.h3,{id:"utilization-analysis",children:"Utilization Analysis"}),"\n",(0,t.jsx)(n.p,{children:"Monitor processing unit utilization in results.txt.\nLow utilization may indicate:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Memory bottlenecks"}),"\n",(0,t.jsx)(n.li,{children:"Poor job parallelization"}),"\n",(0,t.jsx)(n.li,{children:"Insufficient workload size"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"memory-analysis",children:"Memory Analysis"}),"\n",(0,t.jsx)(n.p,{children:"Track memory system performance using DRAMSim3 output statistics."}),"\n",(0,t.jsx)(n.h2,{id:"debugging-and-visualization",children:"Debugging and Visualization"}),"\n",(0,t.jsx)(n.h3,{id:"vcd-waveform-generation",children:"VCD Waveform Generation"}),"\n",(0,t.jsx)(n.p,{children:"Generate detailed execution traces:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Build with VCD support\ncmake -DVCD=ON .. && make\n\n# Run simulation (generates out.vcd)\n./cocossim -i workload.txt -o results.txt\n\n# View with GTKWave or similar\ngtkwave out.vcd\n"})}),"\n",(0,t.jsx)(n.h3,{id:"job-graph-visualization",children:"Job Graph Visualization"}),"\n",(0,t.jsxs)(n.p,{children:["View job dependencies in ",(0,t.jsx)(n.code,{children:"jobs.dot"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"common-usage-patterns",children:"Common Usage Patterns"}),"\n",(0,t.jsx)(n.h3,{id:"benchmarking-different-architectures",children:"Benchmarking Different Architectures"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'#!/bin/bash\n# Benchmark script example\n\nworkloads=("matmul_small.txt" "conv_resnet.txt" "transformer.txt")\ncore_counts=(1 2 4 8)\n\nfor workload in "${workloads[@]}"; do\n    echo "=== Testing $workload ==="\n    for cores in "${core_counts[@]}"; do\n        ./cocossim -c $cores -sa_sz 64 -ws 1 -i $workload -o temp_results.txt\n        result=$(grep "Cycles" temp_results.txt | awk \'{print $2}\')\n        echo "Cores: $cores, Cycles: $result"\n    done\ndone\n'})}),"\n",(0,t.jsx)(n.h3,{id:"parameter-sweeping",children:"Parameter Sweeping"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# Test different systolic array sizes\nfor size in 32 64 128 256; do\n    ./cocossim -c 1 -sa_sz $size -ws 1 -i large_matmul.txt -o temp_results.txt\n    cycles=$(grep "Cycles" temp_results.txt | awk \'{print $2}\')\n    echo "SA_SIZE: $size, Cycles: $cycles"\ndone\n'})}),"\n",(0,t.jsx)(n.h3,{id:"workload-characterization",children:"Workload Characterization"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# Characterize workload memory vs compute intensity\n./cocossim -i workload.txt -o results.txt\nawk \'\n/Cycles/ { cycles = $2 }\n/DRAM CMDs/ { dram = $5 }\n/SYSTOLIC_ARRAY/ { sa_util = $2 }\nEND {\n    print "Memory Intensity:", dram/cycles\n    print "Compute Utilization:", sa_util"%"\n    print "Commands per Cycle:", dram/cycles\n}\' results.txt\n'})}),"\n",(0,t.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,t.jsx)(n.p,{children:"Now that you understand basic usage:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.a,{href:"/cocossim/docs/examples/basic",children:"Examples"})})," - Try more complex workloads"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.a,{href:"/cocossim/docs/guides/architecture",children:"Architecture Guide"})})," - Understand the underlying system design"]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>l,x:()=>a});var s=i(6540);const t={},r=s.createContext(t);function l(e){const n=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);